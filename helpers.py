from flask import redirect, render_template, session
from functools import wraps
from datetime import datetime
from dateutil import tz


def apology(message, code=400):
    """Render message as an apology to user."""
    def escape(s):
        """
        Escape special characters.

        https://github.com/jacebrowning/memegen#special-characters
        """
        for old, new in [("-", "--"), (" ", "-"), ("_", "__"), ("?", "~q"),
                         ("%", "~p"), ("#", "~h"), ("/", "~s"), ("\"", "''")]:
            s = s.replace(old, new)
        return s
    return render_template("apology.html",top=code, bottom=escape(message)), code


def login_required(f):
    """
    Decorate routes to require login.

    https://flask.palletsprojects.com/en/1.1.x/patterns/viewdecorators/
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if session.get("user_id") is None:
            return redirect("/login")
        return f(*args, **kwargs)
    return decorated_function


# Generated by Chatgpt
def convert_arrivaltime_dhl(input_str: str) -> str:
    # Split the input string into start and end times
    start_str, end_str = input_str.split('/')

    # Parse start and end times into datetime objects
    start_time = datetime.fromisoformat(start_str[:-6])  # Remove the timezone info for parsing
    end_time = datetime.fromisoformat(end_str[:-6])

    # Convert time zone to human-readable format
    from_zone = tz.tzutc()
    to_zone = tz.tzlocal()

    start_time = start_time.replace(tzinfo=from_zone)
    end_time = end_time.replace(tzinfo=from_zone)

    start_time = start_time.astimezone(to_zone)
    end_time = end_time.astimezone(to_zone)

    # Format the times into a human-readable string
    formatted_str = f"{start_time.strftime('%Y-%m-%d %H:%M:%S')} to {end_time.strftime('%Y-%m-%d %H:%M:%S')}"

    return formatted_str


# Generated by Chatgpt
def convert_time(input_str: str) -> str:
    # Parse the input timestamp into a datetime object
    input_time = datetime.fromisoformat(input_str)

    # Format the input time into a human-readable string
    input_formatted_str = input_time.strftime('%Y-%m-%d %H:%M:%S')

    return f"{input_formatted_str}"
